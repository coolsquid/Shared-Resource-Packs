// initialize version
version = project.version

// specify repositories and dependencies
buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:" + (project.mcVersion.equals("1.7.10") ? "1.2-SNAPSHOT" : "2.1-SNAPSHOT")
	}
}

// apply plugins
apply plugin: project.mcVersion.equals("1.7.10") ? "forge" : "net.minecraftforge.gradle.forge"

// set java version
sourceCompatibility = project.javaVersion
targetCompatibility = project.javaVersion

// set group and base name
group= project.name.toLowerCase()
archivesBaseName = project.name + "-" + project.mcVersion

// source directories
sourceSets {
	main {
		java { srcDirs = ["$projectDir/src/main/java"] }
		resources { srcDirs = ["$projectDir/src/main/resources"] }
	}
}

// set forge version and mappings
minecraft {
	version = project.forgeVersion
	runDir = "run"
	mappings = project.mappings
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'coolsquid.sharedresourcepacks.asm.Transformer'
    }
}

// include all files in /libs as dependencies
dependencies {
	compile fileTree(dir: "libs", include: "*.jar,*.zip")
}

// update mcmod.info
processResources
{
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.mcVersion

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources) {
		include "mcmod.info"
				
		// replace version and mcversion
		expand "version":project.version, "mcversion":project.minecraft.version
	}
		
	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources) {
		exclude "mcmod.info"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.java
}

task devJar(type: Jar) {
	from sourceSets.main.output
	classifier = "dev"
}

// make the dev and source jars
artifacts {
	if (Boolean.parseBoolean(project.makeSourceJar)) {
		archives sourcesJar
	}
	if (Boolean.parseBoolean(project.makeDevJar)) {
		archives devJar
	}
}